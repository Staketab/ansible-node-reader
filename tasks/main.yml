---
- name: Ensure workdirs exists
  vars:
    ansible_python_interpreter: /usr/bin/python3.10
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - "{{ deployment_workdir_1 }}"
    - "{{ deployment_workdir_2 }}"
    - "{{ deployment_workdir_3 }}"

- name: Download New Relic agent
  vars:
    ansible_python_interpreter: /usr/bin/python3.10
  ansible.builtin.unarchive:
    src: "https://download.newrelic.com/newrelic/java-agent/newrelic-agent/{{ deployment_newrelic_version }}/newrelic-java.zip"
    dest: /tmp
    owner: "{{ deployment_user }}"
    group: "{{ deployment_group }}"
    remote_src: true
  when: deployment_newrelic_enabled

- name: ensure {{ deployment_newrelic_dir }} exist
  vars:
    ansible_python_interpreter: /usr/bin/python3.10
  ansible.builtin.file:
    path: "{{ deployment_newrelic_dir }}"
    state: directory
    mode: 0755

- name: Install New Relic agent
  vars:
    ansible_python_interpreter: /usr/bin/python3.10
  ansible.builtin.copy:
    src: /tmp/newrelic/newrelic.jar
    dest: "{{ deployment_newrelic_dir }}/newrelic.jar"
    owner: "{{ deployment_user }}"
    group: "{{ deployment_group }}"
    remote_src: yes
    mode: 0755
  when: deployment_newrelic_enabled

- name: Transfer an artifact to the remote server
  vars:
    ansible_python_interpreter: /usr/bin/python3.10
  ansible.builtin.copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ deployment_user }}"
    group: "{{ deployment_group }}"
    mode: 0755
  with_items:
    - { src: "{{ deployment_artifact }}", dest: "{{ deployment_workdir_1 }}/app.jar" }
    - { src: "{{ deployment_artifact }}", dest: "{{ deployment_workdir_2 }}/app.jar" }
    - { src: "{{ deployment_artifact }}", dest: "{{ deployment_workdir_3 }}/app.jar" }
  notify: restart_app

- name: Setup environment variables
  vars:
    ansible_python_interpreter: /usr/bin/python3.10
  ansible.builtin.template:
    src: env.j2
    dest: "{{ item.dest }}"
    owner: "{{ deployment_user }}"
    group: "{{ deployment_group }}"
    mode: 0640
  with_items:
    - { dest: "{{ deployment_workdir_1 }}/.env", deployment_port: "{{ deployment_port_1 }}", deployment_ordinal: "{{ deployment_ordinal_1 }}" }
    - { dest: "{{ deployment_workdir_2 }}/.env", deployment_port: "{{ deployment_port_2 }}", deployment_ordinal: "{{ deployment_ordinal_2 }}" }
    - { dest: "{{ deployment_workdir_3 }}/.env", deployment_port: "{{ deployment_port_3 }}", deployment_ordinal: "{{ deployment_ordinal_3 }}" }
  notify: restart_app

# - name: Debug variables
#   vars:
#     ansible_python_interpreter: /usr/bin/python3.10
#   ansible.builtin.debug:
#     msg: "Service: {{ item.service_name }}, Workdir: {{ item.deployment_workdir }}"
#   loop:
#     - { service_name: "{{ deployment_service_1 }}", deployment_workdir: "{{ deployment_workdir_1 }}" }
#     - { service_name: "{{ deployment_service_2 }}", deployment_workdir: "{{ deployment_workdir_2 }}" }
#     - { service_name: "{{ deployment_service_3 }}", deployment_workdir: "{{ deployment_workdir_3 }}" }

- name: Create systemd services
  vars:
    ansible_python_interpreter: /usr/bin/python3.10
  ansible.builtin.template:
    src: systemd.service.j2
    dest: "/etc/systemd/system/{{ item.service_name }}.service"
    owner: root
    group: root
    mode: 0644
  with_items:
    - { service_name: "{{ deployment_service_1 }}", deployment_workdir: "{{ deployment_workdir_1 }}" }
    - { service_name: "{{ deployment_service_2 }}", deployment_workdir: "{{ deployment_workdir_2 }}" }
    - { service_name: "{{ deployment_service_3 }}", deployment_workdir: "{{ deployment_workdir_3 }}" }
  notify: restart_app

- name: Ensure systemd services are started and enabled
  vars:
    ansible_python_interpreter: /usr/bin/python3.10
  ansible.builtin.systemd:
    name: "{{ item.service_name }}"
    state: started
    enabled: true
    daemon_reload: true
  with_items:
    - { service_name: "{{ deployment_service_1 }}" }
    - { service_name: "{{ deployment_service_2 }}" }
    - { service_name: "{{ deployment_service_3 }}" }
